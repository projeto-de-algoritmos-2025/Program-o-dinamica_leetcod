int max(int a, int b) {
    return a > b ? a : b;
}

int minimumMountainRemovals(int* nums, int n) {
    int *dp1 = (int*)malloc(n * sizeof(int));
    int *dp2 = (int*)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        dp1[i] = 1;
        dp2[i] = 1;
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (nums[i] > nums[j] && dp1[i] < dp1[j] + 1) {
                dp1[i] = dp1[j] + 1;
            }
        }
    }

    for (int i = n - 1; i >= 0; i--) {
        for (int j = n - 1; j > i; j--) {
            if (nums[i] > nums[j] && dp2[i] < dp2[j] + 1) {
                dp2[i] = dp2[j] + 1;
            }
        }
    }

    int c = 0;
    for (int i = 0; i < n; i++) {
        if (dp1[i] > 1 && dp2[i] > 1) {  
            c = max(c, dp1[i] + dp2[i] - 1);
        }
    }

    free(dp1);
    free(dp2);
    return (n - c);
}
